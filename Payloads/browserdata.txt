$nugetProvider = Get-PackageProvider -Name NuGet -ErrorAction SilentlyContinue
if (-not $nugetProvider -or [version]$nugetProvider.Version -lt [version]"2.8.5.201") {
    Install-PackageProvider -Name NuGet -MinimumVersion 2.8.5.201 -Force -Scope CurrentUser
}

# Ensure PSSQLite Module
$pssqliteModule = Get-Module -ListAvailable -Name PSSQLite
if (-not $pssqliteModule) {
    Install-Module -Name PSSQLite -Scope CurrentUser -Force
}

Import-Module PSSQLite

function Get-BrowserDataAgain {
    [CmdletBinding()]
    param(
        [Parameter(Mandatory)]
        [ValidateSet('chrome','edge','firefox')]
        [string]$Browser,
        [Parameter(Mandatory)]
        [ValidateSet('history','bookmarks')]
        [string]$DataType,
        # Optional pattern if you only want to match certain URLs
        [string]$Search = '.'
    )

    switch ("$Browser`_$DataType") {
        'chrome_history' {
            $Path = "$Env:USERPROFILE\AppData\Local\Google\Chrome\User Data\Default\History"
            $Query = @"
                SELECT 
                    url, 
                    title, 
                    datetime(last_visit_time/1000000 + (strftime('%s', '1601-01-01')), 'unixepoch') as last_visit
                FROM urls 
                WHERE url LIKE '%$Search%' OR title LIKE '%$Search%'
"@
        }
        'chrome_bookmarks' {
            $Path = "$Env:USERPROFILE\AppData\Local\Google\Chrome\User Data\Default\Bookmarks"
        }
        'edge_history' {
            $Path = "$Env:USERPROFILE\AppData\Local\Microsoft\Edge\User Data\Default\History"
            $Query = @"
                SELECT 
                    url, 
                    title, 
                    datetime(last_visit_time/1000000 + (strftime('%s', '1601-01-01')), 'unixepoch') as last_visit
                FROM urls 
                WHERE url LIKE '%$Search%' OR title LIKE '%$Search%'
"@
        }
        'edge_bookmarks' {
            $Path = "$Env:USERPROFILE\AppData\Local\Microsoft\Edge\User Data\Default\Bookmarks"
        }
        'firefox_history' {
            $Path = "$Env:USERPROFILE\AppData\Roaming\Mozilla\Firefox\Profiles\*.default-release\places.sqlite"
            $Query = @"
                SELECT 
                    url, 
                    title, 
                    datetime(last_visit_date/1000000, 'unixepoch') as last_visit
                FROM moz_places 
                WHERE url LIKE '%$Search%' OR title LIKE '%$Search%'
"@
        }
        'firefox_bookmarks' {
            Write-Warning "Firefox bookmarks are not supported with this naive regex approach."
            return
        }
        default {
            Write-Warning "Invalid combination: $Browser $DataType"
            return
        }
    }

    if (-not (Test-Path $Path)) {
        Write-Warning "File not found: $Path"
        return
    }

    # Handle bookmarks (JSON format) for Chrome/Edge
    if ($DataType -eq 'bookmarks') {
        if ($Browser -eq 'chrome' -or $Browser -eq 'edge') {
            $Content = Get-Content $Path | Out-String | ConvertFrom-Json
            $Bookmarks = $Content.roots | ForEach-Object {
                $_.PSObject.Properties | ForEach-Object {
                    ExtractBookmarks -Node $_.Value
                }
            }
            return $Bookmarks | Where-Object { $_.url -match $Search -or $_.name -match $Search }
        }
    }
    
    # Handle history (SQLite format)
    else {
        try {
            # Copy the database to avoid lock issues
            $TempPath = [System.IO.Path]::GetTempFileName()
            Remove-Item $TempPath
            Copy-Item $Path $TempPath

            # Execute query against the temporary copy
            $Result = Invoke-SqliteQuery -Query $Query -DataSource $TempPath
            
            # Clean up temporary file
            Remove-Item $TempPath -ErrorAction SilentlyContinue
            
            return $Result
        }
        catch {
            Write-Error "Failed to query database: $_"
            # Clean up temporary file on error
            if (Test-Path $TempPath) { Remove-Item $TempPath -ErrorAction SilentlyContinue }
        }
    }
}

# Helper function for recursive bookmark extraction
function ExtractBookmarks {
    param($Node)
    
    if ($Node.type -eq 'folder') {
        return $Node.children | ForEach-Object { ExtractBookmarks -Node $_ }
    }
    elseif ($Node.type -eq 'url') {
        return [PSCustomObject]@{
            name = $Node.name
            url = $Node.url
            date_added = if ($Node.date_added) { 
                [datetime]::FromFileTime(($Node.date_added - 116444736000000000) / 10)
            } else { $null }
        }
    }
}

# Example usage:
Get-BrowserDataAgain -Browser chrome -DataType history
# Get-BrowserDataAgain -Browser edge -DataType bookmarks -Search "work"
# Get-BrowserDataAgain -Browser firefox -DataType history -Search "github"
